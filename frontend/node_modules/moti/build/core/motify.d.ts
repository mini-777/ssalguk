import React, { ComponentType } from 'react';
import type { ImageStyle, TextStyle, ViewStyle } from 'react-native';
import { BaseAnimationBuilder, EntryExitAnimationFunction, LayoutAnimationFunction } from 'react-native-reanimated';
import type { MotiProps } from './types';
export default function motify<Props extends object, Ref, Animate = ViewStyle | ImageStyle | TextStyle>(ComponentWithoutAnimation: ComponentType<Props>): () => React.ForwardRefExoticComponent<React.PropsWithoutRef<Props & AnimatedProps<Props> & MotiProps<Animate, import("./types").StyleValueWithReplacedTransforms<Animate>, Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends (infer U)[] ? never : key extends object ? never : key]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>, { [Key in keyof Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends (infer U)[] ? never : key extends object ? never : key]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>]?: Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends (infer U)[] ? never : key extends object ? never : key]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key] | {
    value: (Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends (infer U)[] ? never : key extends object ? never : key]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key] extends (infer U)[] ? never : Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends (infer U)[] ? never : key extends object ? never : key]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key]) extends object ? never : Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends (infer U)[] ? never : key extends object ? never : key]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key] extends (infer U)[] ? never : Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends (infer U)[] ? never : key extends object ? never : key]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key];
    onDidAnimate: import("./types").InlineOnDidAnimate<Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends (infer U)[] ? never : key extends object ? never : key]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key]>;
} | undefined; }> & {
    children?: React.ReactNode;
}> & React.RefAttributes<Ref>>;
declare type AnimatedProps<Props> = {
    animatedProps?: Partial<Props>;
    layout?: BaseAnimationBuilder | LayoutAnimationFunction | typeof BaseAnimationBuilder;
    entering?: BaseAnimationBuilder | typeof BaseAnimationBuilder | EntryExitAnimationFunction | Keyframe;
    exiting?: BaseAnimationBuilder | typeof BaseAnimationBuilder | EntryExitAnimationFunction | Keyframe;
};
export {};
